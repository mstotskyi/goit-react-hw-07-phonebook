{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/actions.js","redux/reducers.js","redux/store.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","addNewCntacts","createAction","deleteContact","changefilter","contactsReducer","createReducer","actions","state","payload","filter","contact","id","filterReducer","_","combineReducers","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","phonebook","persistReducer","phonebookReducer","persistor","persistStore","getContacts","getVisibleContacts","getFilter","name","toLocaleLowerCase","includes","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","IdName","uuid","IdNumber","handleOnChange","e","target","value","resetForm","onSubmit","preventDefault","obj","some","element","alert","addNewContacts","className","styles","form","htmlFor","label","formInput","type","pattern","title","required","onChange","Filter","IdFilter","ContactItem","contactName","contactDeleteBtn","onClick","ContactList","contactList","map","contactListItem","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.912b64c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__27dHd\",\"contactListItem\":\"ContactList_contactListItem__3WBhO\",\"contactDeleteBtn\":\"ContactList_contactDeleteBtn__3vlK7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3dYc0\",\"label\":\"ContactForm_label__qk_CA\",\"formInput\":\"ContactForm_formInput__e7dlp\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const addNewCntacts = createAction('AddNewContacts');\nexport const deleteContact = createAction('DeleteContact');\nexport const changefilter = createAction('Changefilter');\n\n// export const addNewCntacts = value => ({\n//   type: 'AddNewContacts',\n//   payload: value,\n// });\n\n// export const deleteContact = contactId => ({\n//   type: 'DeleteContact',\n//   payload: contactId,\n// });\n\n// export const handleOnChangefilter = value => ({\n//   type: 'Changefilter',\n//   payload: value,\n// });\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './actions';\n\nconst contactsReducer = createReducer(\n  [],\n  // JSON.parse(window.localStorage.getItem('localContacts')) ?? [],\n  {\n    [actions.addNewCntacts]: (state, { payload }) => [...state, payload],\n    [actions.deleteContact]: (state, { payload }) =>\n      state.filter(contact => contact.id !== payload),\n  },\n);\n\nconst filterReducer = createReducer('', {\n  [actions.changefilter]: (_, { payload }) => payload,\n});\n\n// const contactsReducer = (\n//   state = JSON.parse(window.localStorage.getItem('localContacts')) ?? [],\n//   { type, payload },\n// ) => {\n//   switch (type) {\n//     case 'AddNewContacts':\n//       return [...state, payload];\n//     case 'DeleteContact':\n//       return state.filter(contact => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'Changefilter':\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n","// import { createStore } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport phonebookReducer from './reducers';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistConfig = {\n  key: 'phonebook',\n  storage,\n  blacklist: ['filter'],\n};\n\n// const store = createStore(rootReducer, composeWithDevTools());\nconst store = configureStore({\n  reducer: {\n    phonebook: persistReducer(persistConfig, phonebookReducer),\n  },\n  middleware,\n});\n\nlet persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","export const getContacts = state => state.phonebook.contacts;\r\nexport const getFilter = state => state.phonebook.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\r\n  );\r\n};\r\n","import { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\n// import { connect } from 'react-redux';\n\nimport * as actions from '../../redux/actions';\nimport styles from 'components/ContactForm/ContactForm.module.css';\nimport { getContacts } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContacts);\n  const addNewContacts = obj => dispatch(actions.addNewCntacts(obj));\n\n  const IdName = uuid();\n  const IdNumber = uuid();\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const obj = {\n      name: name,\n      number: number,\n      id: uuid(),\n    };\n    const existedContact = contacts.some(\n      element =>\n        element.name.toLocaleLowerCase() === obj.name.toLocaleLowerCase(),\n    );\n\n    if (existedContact) {\n      return alert(`${obj.name} is already in the contact list`);\n    }\n    addNewContacts(obj);\n    resetForm();\n  };\n\n  const handleOnChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit} className={styles.form}>\n      <label htmlFor={IdName} className={styles.label}>\n        Name\n      </label>\n      <br />\n      <input\n        className={styles.formInput}\n        id={IdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleOnChange}\n      />\n      <br />\n      <label htmlFor={IdNumber} className={styles.label}>\n        Number\n      </label>\n      <br />\n      <input\n        className={styles.formInput}\n        id={IdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleOnChange}\n      />\n      <br />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.phonebook.contacts,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     addNewContacts: obj => dispatch(actions.addNewCntacts(obj)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// ContactForm.propTypes = {\n//   contacts: PropTypes.array,\n//   addNewCntacts: PropTypes.func,\n// };\n","// import PropTypes from 'prop-types';\nimport { v4 as uuid } from 'uuid';\n// import { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const IdFilter = uuid();\n  const dispatch = useDispatch();\n\n  const changefilter = e => dispatch(actions.changefilter(e.target.value));\n\n  return (\n    <>\n      <label htmlFor={IdFilter}>Find contacts by name</label>\n      <br />\n      <input\n        id={IdFilter}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={changefilter}\n      />\n    </>\n  );\n}\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     changefilter: e => dispatch(actions.changefilter(e.target.value)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport styles from 'components/ContactList/ContactList.module.css';\n// import { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport { useDispatch } from 'react-redux';\n\nexport default function ContactItem({ number, id, name }) {\n  const dispatch = useDispatch();\n  const deleteContact = id => dispatch(actions.deleteContact(id));\n\n  return (\n    <>\n      <span className={styles.contactName}>{name}:</span>\n      <span> {number}</span>\n      <button\n        className={styles.contactDeleteBtn}\n        type=\"button\"\n        id={id}\n        onClick={() => {\n          deleteContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </>\n  );\n}\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     deleteContact: id => dispatch(actions.deleteContact(id)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactItem);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\nimport ContactItem from 'components/ContactList/ContactItem';\nimport styles from 'components/ContactList/ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n\n  return (\n    <ul className={styles.contactList}>\n      {contacts.map(contact => (\n        <li key={contact.id} className={styles.contactListItem}>\n          <ContactItem\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.phonebook.contacts,\n//     filter: state.phonebook.filter,\n//   };\n// };\n\n// export default connect(mapStateToProps, null)(ContactList);\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n// };\n","import './App.css';\nimport React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Phonebook\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <div className=\"contacts-wrapper\">\n          <h2 className=\"contacts-title\">Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import actions from 'redux/actions';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}